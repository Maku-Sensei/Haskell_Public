import Data.Char
import Data.List
import Data.Maybe
-- Aufgabe
-- Finde f"ur fun1 bis fun5 heraus, welche der folgenden Wirkungen
-- diese Funktion auf Zeichenketten hat (Mehrfachantworten sind möglich)
-- Finde es heraus durch Testen im Interpreter
-- Der Quellcode hier ist mit Absicht nahezu unleserlich

-- A)  macht aus Kleinbuchstaben Grossbuchstaben
-- B)  macht aus Grossbuchstaben Kleinbuchstaben
-- C)  macht aus dem i-ten Buchstaben des Alphabets die Zahl i
-- D)  erniedrigt alle Ziffern (ausser der 0) um 1
-- E)  macht aus jedem Fragezeichen ein Ausrufezeichen
-- F)  ersetzt alle Ziffern (außer 0), durch ihre Darstellung als Römische Zahl
-- G)  entfernt alle runden Klammern
-- H)  verdoppelt alle Vorkommen der Buchstaben x,y,z,X,Y,Z
-- I)  vertauscht in Saetzen manche Worte
-- J)  entfernt Worte, die mehrfach im Text auftauschen
-- K)  l"oscht Leerzeichen, falls Worte mit mehr als einem Leerzeichen getrennt sind

fun1 = gg "Aha"
fun2 = gg "Bloedsinn"
fun3 = gg "Chic"
fun4 = gg "Derb"
fun5 = gg "Es"

gg (bs@(a:_)) x =
 case ord a of 
  50 -> concatMap    r x where r x | ord x `elem` [65..90] ++ [192,194,195,196,197,198,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222]  = [toLower x] | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x == 63 = (:) (chr 33) [] | (1 < 2) = [x]
  51 -> concatMap r  x where r x | ord x `elem` [65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = show $ 1+ (fromJust $ elemIndex (toLower x) ['a'..'z']) | ord x `elem` [48..57] = ["0","I","II","III","IV","V","VI","VII","VIII","IX"]!!(ord x - 48) | True = [x]
  52 -> concatMap r $ s  x where r x  | ord x `elem` [120,128,89,90] = x:x:[] | (True == True) = [x]; s x = unwords $ concat $ rek (words x); rot (a:b:c:d:e:f:g:h:i:j:k:l) = (k:a:b:c:d:e:f:g:h:i:j:l); rot (a:b:c:d:e:f:g) = a:b:c:d:f:e:g ;rot xs = xs; rek [] = []; rek xs = let (a,e) = splitAt 11 xs in (rot a):(rek e) 
  53 -> concatMap r x where r x | ord x `elem` [65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = show $ 1+ (fromJust $ elemIndex (toLower x) ['a'..'z']) | ord x `elem` [48..57] = ["0","I","II","III","IV","V","VI","VII","VIII","IX"]!!(ord x - 48) | True = [x]
  54 -> concatMap r x where r x | ord x `elem` [97,98,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = [toUpper x] | ord x `elem` [40,41] = ""  | otherwise = [x]; s' xs = unwords $ nub $ words xs
  55 -> concatMap r ( s' x) where r x | ord x `elem` [97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = [toUpper x] | ord x `elem` [40,41] = ""  | otherwise = [x]; s' xs = unwords $ nub $ words xs
  56 -> concatMap r x where r x | ord x `elem` [65..90] ++ [192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222]  = [toLower x] | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x == 63 = (:) (chr 33) [] | (1 < 2) = [x]
  57 -> concatMap r x where r x | ord x `elem` [8..57] = show $ max (ord x - 49) 0 | ord x `elem` [40,41] = "" | (False || not (False)) = x:[]
  58 -> concatMap r x where r x | ord x `elem` [48..(100-95)] = show $ max (ord x - 49) 0 | ord x `elem` [40,41] = "" | (False || not (False)) = x:[]
  59 -> concatMap r $ s    x where r x  | ord x `elem` [120,121,122,88,89,90] = x:x:[] | (True == True) = [x]; s x = unwords $ concat $ rek (words x); rot (a:b:c:d:e:f:g:h:i:j:k:l) = (k:a:b:c:d:e:f:g:h:i:j:l); rot (a:b:c:d:e:f:g) = a:b:c:d:f:e:g ;rot xs = xs; rek [] = []; rek xs = let (a,e) = splitAt 11 xs in (rot a):(rek e) 
  60 -> concatMap r x where r x | ord x `elem` [65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = show $ 1+ (fromJust $ elemIndex (toLower x) ['a'..'z']) | ord x `elem` [48..57] = ["0","I","II","III","IV","V","VI","VII","VIII","IX"]!!(ord x - 48) | True = [x]
  61 -> concatMap r x where r x | ord x `elem` [65..90] ++ [192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222]  = [toLower x] | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x == 63 = (:) (chr 33) [] | (1 < 2) = [x]
  62 -> concatMap r $ s    x where r x  | ord x `elem` [120,121,122,88,89,90] = x:x:[] | (True == True) = [x]; s x = unwords $ concat $ rek (words x); rot (a:b:c:d:e:f:g:h:i:j:k:l) = (k:a:b:c:d:e:f:g:h:i:j:l); rot (a:b:c:d:e:f:g) = a:b:c:d:f:e:g ;rot xs = xs; rek [] = []; rek xs = let (a,e) = splitAt 11 xs in (rot a):(rek e) 
  63 -> concatMap r ( s' x) where r x | ord x `elem` [97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = [toUpper x] | ord x `elem` [40,41] = ""  | otherwise = [x]; s' xs = unwords $ nub $ words xs
  64 -> concatMap r x where r x | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x `elem` [40,41] = "" | (False || not (False)) = x:[]
  65 -> concatMap r x where r x | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x `elem` [40,41] = "" | (False || not (False)) = x:[]
  66 -> concatMap r ( s' x) where r x | ord x `elem` [97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = [toUpper x] | ord x `elem` [40,41] = ""  | otherwise = [x]; s' xs = unwords $ nub $ words xs
  67 -> concatMap r x where r x | ord x `elem` [65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = show $ 1+ (fromJust $ elemIndex (toLower x) ['a'..'z']) | ord x `elem` [48..57] = ["0","I","II","III","IV","V","VI","VII","VIII","IX"]!!(ord x - 48) | True = [x]
  68 -> concatMap r $ s    x where r x  | ord x `elem` [120,121,122,88,89,90] = x:x:[] | (True == True) = [x]; s x = unwords $ concat $ rek (words x); rot (a:b:c:d:e:f:g:h:i:j:k:l) = (k:a:b:c:d:e:f:g:h:i:j:l); rot (a:b:c:d:e:f:g) = a:b:c:d:f:e:g ;rot xs = xs; rek [] = []; rek xs = let (a,e) = splitAt 11 xs in (rot a):(rek e) 
  69 -> concatMap r x where r x | ord x `elem` [65..90] ++ [192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222]  = [toLower x] | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x == 63 = (:) (chr 33) [] | (1 < 2) = [x]
  70 -> concatMap r x where r x | ord x `elem` [65,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = show $ 1+ (fromJust $ elemIndex (toLower x) ['a'..'z']) | ord x `elem` [48..57] = ["0","I","II","III","IV","V","VI","VII","VIII","IX"]!!(ord x - 48) | True = [x]
  71 -> concatMap r x where r x | ord x `elem` [65..90] ++ [192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222]  = [toLower x] | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x == 63 = (:) (chr 33) [] | (1 < 2) = [x]
  72 -> concatMap r $ s    x where r x  | ord x `elem` [120,121,122,88,89,90] = x:x:[] | (True == True) = [x]; s x = unwords $ concat $ rek (words x); rot (a:b:c:d:e:f:g:h:i:j:k:l) = (k:a:b:c:d:e:f:g:h:i:j:l); rot (a:b:c:d:e:f:g) = a:b:c:d:f:e:g ;rot xs = xs; rek [] = []; rek xs = let (a,e) = splitAt 11 xs in (rot a):(rek e) 
  73 -> concatMap r ( s' x) where r x | ord x `elem` [97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = [toUpper x] | ord x `elem` [40,41] = ""  | otherwise = [x]; s' xs = unwords $ nub $ words xs
  74 -> concatMap r x where r x | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x `elem` [40,41] = "" | (False || not (False)) = x:[]
  75 -> concatMap r x where r x | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x `elem` [40,41] = "" | (False || not (False)) = x:[]
  76 -> concatMap r ( s' x) where r x | ord x `elem` [98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = [toUpper x] | ord x `elem` [40,41] = ""  | otherwise = [x]; s' xs = unwords $ nub $ words xs
  77 -> concatMap r x where r x | ord x `elem` [65,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = show $ 1+ (fromJust $ elemIndex (toLower x) ['a'..'z']) | ord x `elem` [48..57] = ["0","I","II","III","IV","V","VI","VII","VIII","IX"]!!(ord x - 48) | True = [x]
  78 -> concatMap r $ s    x where r x  | ord x `elem` [120,121,122,88,89,90] = x:x:[] | (True == True) = [x]; s x = unwords $ concat $ rek (words x); rot (a:b:c:d:e:f:g:h:i:j:k:l) = (k:a:b:c:d:e:f:g:h:i:j:l); rot (a:b:c:d:e:f:g) = a:b:c:d:f:e:g ;rot xs = xs; rek [] = []; rek xs = let (a,e) = splitAt 11 xs in (rot a):(rek e) 
  79 -> concatMap r x where r x | ord x `elem` [65..88] ++ [192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222]  = [toLower x] | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x == 63 = (:) (chr 33) [] | (1 < 2) = [x]
  80 -> concatMap r x where r x | ord x `elem` [65,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = show $ 1+ (fromJust $ elemIndex (toLower x) ['a'..'z']) | ord x `elem` [48..57] = ["0","I","II","III","IV","V","VI","VII","VIII","IX"]!!(ord x - 48) | True = [x]
  81 -> concatMap r x where r x | ord x `elem` [65..90] ++ [192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222]  = [toLower x] | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x == 63 = (:) (chr 33) [] | (1 < 2) = [x]
  82 -> concatMap r $ s    x where r x  | ord x `elem` [120,121,122,88,89,90] = x:x:[] | (True == True) = [x]; s x = unwords $ concat $ rek (words x); rot (a:b:c:d:e:f:g:h:i:j:k:l) = (k:a:b:c:d:e:f:g:h:i:j:l); rot (a:b:c:d:e:f:g) = a:b:c:d:f:e:g ;rot xs = xs; rek [] = []; rek xs = let (a,e) = splitAt 11 xs in (rot a):(rek e) 
  83 -> concatMap r ( s' x) where r x | ord x `elem` [97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = [toUpper x] | ord x `elem` [40,41] = ""  | otherwise = [x]; s' xs = unwords $ nub $ words xs
  84 -> concatMap r x where r x | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x `elem` [40,41] = "" | (False || not (False)) = x:[]
  85 -> concatMap r x where r x | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x `elem` [40,41] = "" | (False || not (False)) = x:[]
  86 -> concatMap r ( s' x) where r x | ord x `elem` [98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = [toUpper x] | ord x `elem` [40,41] = ""  | otherwise = [x]; s' xs = unwords $ nub $ words xs
  87 -> concatMap r x where r x | ord x `elem` [65,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = show $ 1+ (fromJust $ elemIndex (toLower x) ['a'..'z']) | ord x `elem` [48..57] = ["0","I","II","III","IV","V","VI","VII","VIII","IX"]!!(ord x - 48) | True = [x]
  88 -> concatMap r $ s    x where r x  | ord x `elem` [120,121,122,88,89,90] = x:x:[] | (True == True) = [x]; s x = unwords $ concat $ rek (words x); rot (a:b:c:d:e:f:g:h:i:j:k:l) = (k:a:b:c:d:e:f:g:h:i:j:l); rot (a:b:c:d:e:f:g) = a:b:c:d:f:e:g ;rot xs = xs; rek [] = []; rek xs = let (a,e) = splitAt 11 xs in (rot a):(rek e) 
  89 -> concatMap r x where r x | ord x `elem` [65..88] ++ [192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222]  = [toLower x] | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x == 63 = (:) (chr 33) [] | (1 < 2) = [x]
  _  -> concatMap r x where r x | ord x `elem` [65,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = show $ 1+ (fromJust $ elemIndex (toLower x) ['a'..'z']) | ord x `elem` [48..57] = ["0","I","II","III","IV","V","VI","VII","VIII","IX"]!!(ord x - 48) | True = [x]
