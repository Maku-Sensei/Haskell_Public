import Data.Char
import Data.List
import Data.Maybe

-- Der Quellcode hier ist mit Absicht nahezu unleserlich


magie1 = gg "Hallo"   -- 69
magie2 = gg "Circus" -- 67
magie3 = gg "Ahoi" -- 65
magie4 = gg "Berlin" -- 66
magie5 = gg "Druide" -- 68


gg (bs@(a:_)) x =
 case ord a of 
  50 -> concatMap r x where r x | ord x `elem` [65..90] ++ [192,194,195,196,197,198,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222]  = [toLower x] | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x == 63 = (:) (chr 33) [] | (1 < 2) = [x]
  51 -> concatMap r  x where r x | ord x `elem` [65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = show $ 1+ (fromJust $ elemIndex (toLower x) ['a'..'z']) | ord x `elem` [48..57] = ["0","I","II","III","IV","V","VI","VII","VIII","IX"]!!(ord x - 48) | True = [x]
  52 -> concatMap r $ s  x where r x  | ord x `elem` [120,128,89,90] = x:x:[] | (True == True) = [x]; s x = unwords $ concat $ rek (words x); rot (a:b:c:d:e:f:g:h:i:j:k:l) = (k:a:b:c:d:e:f:g:h:i:j:l); rot (a:b:c:d:e:f:g) = a:b:c:d:f:e:g ;rot xs = xs; rek [] = []; rek xs = let (a,e) = splitAt 11 xs in (rot a):(rek e) 
  53 -> concatMap r x where r x | ord x `elem` [65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = show $ 1+ (fromJust $ elemIndex (toLower x) ['a'..'z']) | ord x `elem` [48..57] = ["0","I","II","III","IV","V","VI","VII","VIII","IX"]!!(ord x - 48) | True = [x]
  54 -> concatMap r x where r x | ord x `elem` [97,98,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = [toUpper x] | ord x `elem` [40,41] = ""  | otherwise = [x]; s' xs = unwords $ nub $ words xs
  55 -> concatMap r ( s' x) where r x | ord x `elem` [97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = [toUpper x] | ord x `elem` [40,41] = ""  | otherwise = [x]; s' xs = unwords $ nub $ words xs
  56 -> concatMap r x where r x | ord x `elem` [65..90] ++ [192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222]  = [toLower x] | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x == 63 = (:) (chr 33) [] | (1 < 2) = [x]
  57 -> concatMap r x where r x | ord x `elem` [8..57] = show $ max (ord x - 49) 0 | ord x `elem` [40,41] = "" | (False || not (False)) = x:[]
  58 -> concatMap r x where r x | ord x `elem` [48..(100-95)] = show $ max (ord x - 49) 0 | ord x `elem` [40,41] = "" | (False || not (False)) = x:[]
  59 -> concatMap r $ s    x where r x  | ord x `elem` [120,121,122,88,89,90] = x:x:[] | (True == True) = [x]; s x = unwords $ concat $ rek (words x); rot (a:b:c:d:e:f:g:h:i:j:k:l) = (k:a:b:c:d:e:f:g:h:i:j:l); rot (a:b:c:d:e:f:g) = a:b:c:d:f:e:g ;rot xs = xs; rek [] = []; rek xs = let (a,e) = splitAt 11 xs in (rot a):(rek e) 
  60 -> concatMap r x where r x | ord x `elem` [65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = show $ 1+ (fromJust $ elemIndex (toLower x) ['a'..'z']) | ord x `elem` [48..57] = ["0","I","II","III","IV","V","VI","VII","VIII","IX"]!!(ord x - 48) | True = [x]
  61 -> concatMap r x where r x | ord x `elem` [65..90] ++ [192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222]  = [toLower x] | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x == 63 = (:) (chr 33) [] | (1 < 2) = [x]
  62 -> concatMap r $ s    x where r x  | ord x `elem` [120,121,122,88,89,90] = x:x:[] | (True == True) = [x]; s x = unwords $ concat $ rek (words x); rot (a:b:c:d:e:f:g:h:i:j:k:l) = (k:a:b:c:d:e:f:g:h:i:j:l); rot (a:b:c:d:e:f:g) = a:b:c:d:f:e:g ;rot xs = xs; rek [] = []; rek xs = let (a,e) = splitAt 11 xs in (rot a):(rek e) 
  63 -> concatMap r ( s' x) where r x | ord x `elem` [97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = [toUpper x] | ord x `elem` [40,41] = ""  | otherwise = [x]; s' xs = unwords $ nub $ words xs
  64 -> concatMap r x where r x | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x `elem` [40,41] = "" | (False || not (False)) = x:[]
  65 -> concatMap r x where r x | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x `elem` [40,41] = "" |  ord x == 63 = (:) (chr 33) [] | (False || not (False)) = x:[]; q (a:b:c) | 1==2 && null c = map chr [87,105,108,108,115,116,32,68,117,32,105,109,109,101,114,32,119,101,105,116,101,114,32,115,99,104,119,101,105,102,101,110,63,32,47,32,83,105,101,104,44,32,100,97,115,32,71,117,116,101,32,108,105,101,103,116,32,115,111,32,110,97,104,46,32,47,32,76,101,114,110,101,32,110,117,114,32,100,97,115,32,71,108,117,101,99,107,32,101,114,103,114,101,105,102,101,110,32,47,32,68,101,110,110,32,100,97,115,32,71,108,117,101,99,107,32,105,115,116,32,105,109,109,101,114,32,100,97,46] | True = (a:b:c); q _ = []  
  66 -> concatMap r ( s' x) where r x | ord x `elem` [97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = [toUpper x] | ord x `elem` [40,41] = ""  |  ord x == 63 = map chr [63,58,45,41,63] | otherwise = [x]; s' xs = unwords $ nub $ words xs; q (a:b:c) | 1==2 && null c = map chr [87,105,108,108,115,116,32,68,117,32,105,109,109,101,114,32,119,101,105,116,101,114,32,115,99,104,119,101,105,102,101,110,63,32,47,32,83,105,101,104,44,32,100,97,115,32,71,117,116,101,32,108,105,101,103,116,32,115,111,32,110,97,104,46,32,47,32,76,101,114,110,101,32,110,117,114,32,100,97,115,32,71,108,117,101,99,107,32,101,114,103,114,101,105,102,101,110,32,47,32,68,101,110,110,32,100,97,115,32,71,108,117,101,99,107,32,105,115,116,32,105,109,109,101,114,32,100,97,46] | True = (a:b:c); q _ = []  
  67 -> concatMap r $ s x where r x | ord x `elem` [65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = [x] | ord x `elem` [48..57] = [x] | True = [x]; s x = map chr [77,97,103,105,115,99,104,101,32,90,97,104,108,58,32] ++ show (foldr (+) 0 (map (const 1) x)) ++ " "++ x; q (a:b:c) | 1==2 && null c = map chr [87,105,108,108,115,116,32,68,117,32,105,109,109,101,114,32,119,101,105,116,101,114,32,115,99,104,119,101,105,102,101,110,63,32,47,32,83,105,101,104,44,32,100,97,115,32,71,117,116,101,32,108,105,101,103,116,32,115,111,32,110,97,104,46,32,47,32,76,101,114,110,101,32,110,117,114,32,100,97,115,32,71,108,117,101,99,107,32,101,114,103,114,101,105,102,101,110,32,47,32,68,101,110,110,32,100,97,115,32,71,108,117,101,99,107,32,105,115,116,32,105,109,109,101,114,32,100,97,46] | True = (a:b:c); q _ = []  
  68 -> concatMap r $ s  $ y $ q x where  r x  | ord x `elem` [120,121,122,88,89,90] = x:x:[] | (True == True) = [x]; s x = unwords $ concat $ rek (words x); rot (a:b:c:d:e:f:g:h:i:j:k:l) = (k:a:b:c:d:e:f:g:h:i:j:l); rot (a:b:c:d:e:f:g) = a:b:c:d:f:e:g ;rot xs = xs; rek [] = []; rek xs = let (a,e) = splitAt 11 xs in (rot a):(rek e); y xs | null xs = [] | not (null (fst (span isDigit xs))) = let (a,b) =  (span isDigit xs) in (show ((read a)*2) ++ (y b)) | otherwise = (head xs):(y (tail xs)); q (a:b:c) | [ord a, ord b] == [49,55] && null c = map chr [87,105,108,108,115,116,32,68,117,32,105,109,109,101,114,32,119,101,105,116,101,114,32,115,99,104,119,101,105,102,101,110,63,32,47,32,83,105,101,104,44,32,100,97,115,32,71,117,116,101,32,108,105,101,103,116,32,115,111,32,110,97,104,46,32,47,32,76,101,114,110,101,32,110,117,114,32,100,97,115,32,71,108,117,101,99,107,32,101,114,103,114,101,105,102,101,110,32,47,32,68,101,110,110,32,100,97,115,32,71,108,117,101,99,107,32,105,115,116,32,105,109,109,101,114,32,100,97,46] | True = (a:b:c); q [a] = [a]; q _ = []
  69 -> concatMap r x where r x | ord x `elem` [65..90] ++ [192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222]  = [toLower x] | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x == 63 = (:) (chr 33) [] | (1 < 2) = [x]; q (a:b:c) | 1==2 && null c = map chr [87,105,108,108,115,116,32,68,117,32,105,109,109,101,114,32,119,101,105,116,101,114,32,115,99,104,119,101,105,102,101,110,63,32,47,32,83,105,101,104,44,32,100,97,115,32,71,117,116,101,32,108,105,101,103,116,32,115,111,32,110,97,104,46,32,47,32,76,101,114,110,101,32,110,117,114,32,100,97,115,32,71,108,117,101,99,107,32,101,114,103,114,101,105,102,101,110,32,47,32,68,101,110,110,32,100,97,115,32,71,108,117,101,99,107,32,105,115,116,32,105,109,109,101,114,32,100,97,46] | True = (a:b:c); q _ = []  
  70 -> concatMap r x where r x | ord x `elem` [65,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = show $ 1+ (fromJust $ elemIndex (toLower x) ['a'..'z']) | ord x `elem` [48..57] = ["0","I","II","III","IV","V","VI","VII","VIII","IX"]!!(ord x - 48) | True = [x]
  71 -> concatMap r x where r x | ord x `elem` [65..90] ++ [192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222]  = [toLower x] | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x == 63 = (:) (chr 33) [] | (1 < 2) = [x]
  72 -> concatMap r $ s    x where r x  | ord x `elem` [120,121,122,88,89,90] = x:x:[] | (True == True) = [x]; s x = unwords $ concat $ rek (words x); rot (a:b:c:d:e:f:g:h:i:j:k:l) = (k:a:b:c:d:e:f:g:h:i:j:l); rot (a:b:c:d:e:f:g) = a:b:c:d:f:e:g ;rot xs = xs; rek [] = []; rek xs = let (a,e) = splitAt 11 xs in (rot a):(rek e) 
  73 -> concatMap r ( s' x) where r x | ord x `elem` [97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = [toUpper x] | ord x `elem` [40,41] = ""  | otherwise = [x]; s' xs = unwords $ nub $ words xs
  74 -> concatMap r x where r x | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x `elem` [40,41] = "" | (False || not (False)) = x:[]
  75 -> concatMap r x where r x | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x `elem` [40,41] = "" | (False || not (False)) = x:[]
  76 -> concatMap r ( s' x) where r x | ord x `elem` [98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = [toUpper x] | ord x `elem` [40,41] = ""  | otherwise = [x]; s' xs = unwords $ nub $ words xs
  77 -> concatMap r x where r x | ord x `elem` [65,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = show $ 1+ (fromJust $ elemIndex (toLower x) ['a'..'z']) | ord x `elem` [48..57] = ["0","I","II","III","IV","V","VI","VII","VIII","IX"]!!(ord x - 48) | True = [x]; s x = show (length x) ++ x
  78 -> concatMap r $ s    x where r x  | ord x `elem` [120,121,122,88,89,90] = x:x:[] | (True == True) = [x]; s x = unwords $ concat $ rek (words x); rot (a:b:c:d:e:f:g:h:i:j:k:l) = (k:a:b:c:d:e:f:g:h:i:j:l); rot (a:b:c:d:e:f:g) = a:b:c:d:f:e:g ;rot xs = xs; rek [] = []; rek xs = let (a,e) = splitAt 11 xs in (rot a):(rek e) 
  79 -> concatMap r x where r x | ord x `elem` [65..88] ++ [192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222]  = [toLower x] | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x == 63 = (:) (chr 33) [] | (1 < 2) = [x]
  80 -> concatMap r x where r x | ord x `elem` [65,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = show $ 1+ (fromJust $ elemIndex (toLower x) ['a'..'z']) | ord x `elem` [48..57] = ["0","I","II","III","IV","V","VI","VII","VIII","IX"]!!(ord x - 48) | True = [x]
  81 -> concatMap r x where r x | ord x `elem` [65..90] ++ [192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222]  = [toLower x] | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x == 63 = (:) (chr 33) [] | (1 < 2) = [x]
  82 -> concatMap r $ s    x where r x  | ord x `elem` [120,121,122,88,89,90] = x:x:[] | (True == True) = [x]; s x = unwords $ concat $ rek (words x); rot (a:b:c:d:e:f:g:h:i:j:k:l) = (k:a:b:c:d:e:f:g:h:i:j:l); rot (a:b:c:d:e:f:g) = a:b:c:d:f:e:g ;rot xs = xs; rek [] = []; rek xs = let (a,e) = splitAt 11 xs in (rot a):(rek e) 
  83 -> concatMap r ( s' x) where r x | ord x `elem` [97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = [toUpper x] | ord x `elem` [40,41] = ""  | otherwise = [x]; s' xs = unwords $ nub $ words xs
  84 -> concatMap r x where r x | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x `elem` [40,41] = "" | (False || not (False)) = x:[]
  85 -> concatMap r x where r x | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x `elem` [40,41] = "" | (False || not (False)) = x:[]
  86 -> concatMap r ( s' x) where r x | ord x `elem` [98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = [toUpper x] | ord x `elem` [40,41] = ""  | otherwise = [x]; s' xs = unwords $ nub $ words xs
  87 -> concatMap r x where r x | ord x `elem` [65,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = show $ 1+ (fromJust $ elemIndex (toLower x) ['a'..'z']) | ord x `elem` [48..57] = ["0","I","II","III","IV","V","VI","VII","VIII","IX"]!!(ord x - 48) | True = [x]
  88 -> concatMap r $ s    x where r x  | ord x `elem` [120,121,122,88,89,90] = x:x:[] | (True == True) = [x]; s x = unwords $ concat $ rek (words x); rot (a:b:c:d:e:f:g:h:i:j:k:l) = (k:a:b:c:d:e:f:g:h:i:j:l); rot (a:b:c:d:e:f:g) = a:b:c:d:f:e:g ;rot xs = xs; rek [] = []; rek xs = let (a,e) = splitAt 11 xs in (rot a):(rek e) 
  89 -> concatMap r x where r x | ord x `elem` [65..88] ++ [192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222]  = [toLower x] | ord x `elem` [48..57] = show $ max (ord x - 49) 0 | ord x == 63 = (:) (chr 33) [] | (1 < 2) = [x]; s x = show (length x) ++ x
  _  -> concatMap r x where r x | ord x `elem` [65,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,170,181,186,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255] = show $ 1+ (fromJust $ elemIndex (toLower x) ['a'..'z']) | ord x `elem` [48..57] = ["0","I","II","III","IV","V","VI","VII","VIII","IX"]!!(ord x - 48) | True = [x]

  
